openapi: 3.0.1
info:
  title: Route & Navigation
  description: >-
    <p>Routing and displaying driving directions on map, including instructions
    for navigation, distance to destination, traffic etc. are few of the most
    important parts of developing a map based application. This REST API
    calculates driving routes between specified locations including via
    points.</p> 

      Tables:

      | **VERSION DETAILS**   |   |
      | ------- | -------- |
      | DOCUMENT SUBMITTED BY | Yashowardhan |
      | REFRENCE DOCUMENT NAME | Advance Direction Platform v5.22 |
      
      | **CHANGE LOGS**    |   |
      | ------- | -------- |
      | **Version / Revision no.** | **Description** |
      | 220.17.522 |- Added multiple exclude classes (upto 3) in one time|  
      | |- Sources &  Destinations are added for Distance Matrix.|  
      | |- Added multiple exclude classes (upto 3) in one time|    
      | |- Added new Map matching API, which will be snap a single point on road network|  
      | |- Deprecated "prevRouteId" from route_eta API|  
      | |- Added "sessionId" in route_eta and route_eta_refresh API to support "share trip" feature|  
      | |- Additional status code handling for route_eta and route_eta_refresh API|
      | |- Added new parameter for route_eta is 'isSort' to show route index duration in a order manner that is fast to low duration (Ascending order).
      | |- Added new annotation value is 'baseDuration' to get optimal (Without Traffic) duration of route.   
      
      
      
      

      An image:
        ![MapmyIndia logo](https://en.wikipedia.org/wiki/MapmyIndia/media/File:MapmyIndia.jpg)

    <h2>Important notes</h2><ul>  <li>URLs: the urls to use for UAT and
    Production are: <ul><li> **UAT**:
    <code>*https://am.mapmyindia.in*</code><li>  **Production**:
    <code>*https://apis.mapmyindia.com*</code></li> <li> **Authentication**:    
    <ul>      <li>To call our API, authorization is required through an access
    token provided in request header <code>Authorization</code>. For example
    <code>Authorization: 'bearer your_access_token'</code> </li>      <li>For us
    to call the API, if your endpoint requires API key authorization, then the
    API key is provided in request header <code>api-key</code>. For example
    <code>api-key: 'abc123'</code> </li>    </ul>  </li>  <li>For any issues or
    questions please submit it to the support : <a
    href="mailto:apisupport@mapmyindia.com" target="_blank">API Support</a>, if
    you haven't got access to the support portal contact your service account
    manager with any questions</li></ul>

    Example request:<br><code>curl -X GET \

    *https://apis.mapmyindia.com/advancedmaps/v1/<lic_key>/route_adv/driving/* \

    -H 'Authorization: bearer xxxx-xxxxxx-xxxxxx-xxxxxx-xxxxxx' \

    -H 'Content-Type: application/json' \</code><p></p>
  contact:
    name: MapmyIndia API Support
    url: 'https://www.mapmyindia.com/api/#f_cont'
    email: apisupport@mapmyindia.com
  termsOfService: 'https://www.mapmyindia.com/api/terms-&-conditions'
  version: V1.0.0
  license:
    name: Revised BSD-3 Clause
    url: >-
      https://github.com/MapmyIndia/mapmyindia-geoanalytics-api-web/blob/master/LICENSE/master/LICENSE
tags:
  - name: DistanceMatrix
    description: >-
      *This API computes the distance and duration of a route between a
      source/primary position (geographical coordinates) and a list of all
      supplied secondary positions.*
  - name: Routing
    description: >-
      *Routing and displaying driving directions on map, including instructions
      for navigation, distance to destination, traffic etc*
  - name: SnapToRoad
    description: >-
      *Snap To Road API, snaps given GPS points to the road network in the most
      plausible way. Please note the request might result multiple sub-traces*
  - name: MapMatching
    description: >-
      *Map matching matches/snaps given GPS point to the road network in the
      most plausible way.*
paths:
  '/advancedmaps/v1/{license_key}/distance_matrix/{profile}/{coordinates}':
    get:
      tags:
        - DistanceMatrix
      summary: Default Distance Matrix API without Traffic and ETA factor.
      description: >-
        Adding driving directions API would help to add predicted travel time &
        duration from a given origin point to a number of points. This REST API
        computes the distance and duration of a route between a source/primary
        position (geographical coordinates) and a list of all supplied secondary
        positions using to mode of route calculation i.e. optimal and shortest.
        Supported region (countries) are India, Sri Lanka, Nepal, Bangladesh,
        Myanmar & Bhutan. Please note that maximum number of points are limited
        to 100 only including source and destination positions For any issues or
        questions please check DOC : <a
        href="https://www.mapmyindia.com/api/advanced-maps/doc/driving-distance-matrix-api"
        target="_blank">Document Reference</a>
      operationId: getDistanceMatrixWithoutTrafficUsingGET
      parameters:
        - $ref: '#/components/parameters/license_key'
        - $ref: '#/components/parameters/profile'
        - $ref: '#/components/parameters/coordinates'
        - $ref: '#/components/parameters/sources'
        - $ref: '#/components/parameters/destinations'
        - $ref: '#/components/parameters/rtype'
        - $ref: '#/components/parameters/region'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/distance_matrix'
        '400':
          description: 'Bad Request, User made an error while creating a valid request.'
        '401':
          description: 'Unauthorized, Developer’s key is not allowed to send a request'
        '403':
          description: >-
            Forbidden, Developer’s key has hit its daily/hourly limit or IP or
            domain not white-listed.
        '404':
          description: HTTP not found
        '412':
          description: 'Precondition Failed, i.e. Mandatory parameter is missing'
        '500':
          description: 'Internal Server Error, the request caused an error in our systems.'
        '503':
          description: >-
            Service Unavailable, during our maintenance break or server
            down-times.
      deprecated: false
    servers:
      - url: 'https://am.mapmyindia.in'
        description: MapmyIndia UAT Server for Development & Evaluation
      - url: 'https://apis.mapmyindia.com'
        description: MapmyIndia Production Server
  '/advancedmaps/v1/{license_key}/distance_matrix_traffic/{profile}/{coordinates}':
    get:
      tags:
        - DistanceMatrix
      summary: Distance Matrix API with Traffic
      description: >-
        To search for routes considering with live traffic along with all
        specifications of Distance Matrix indeed; Applicable for India only
        “region=ind” and “rtype=1” is not supported
      operationId: getDistanceMatrixWithTrafficUsingGET
      parameters:
        - $ref: '#/components/parameters/license_key'
        - name: profile
          in: path
          description: >-
            Profile for routing engine.(Distance matrix traffic available only
            for driving)
          schema:
            type: string
            default: driving
          allowEmptyValue: false
          required: true
        - $ref: '#/components/parameters/coordinates'
        - $ref: '#/components/parameters/sources'
        - $ref: '#/components/parameters/destinations'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/distance_matrix'
        '400':
          description: 'Bad Request, User made an error while creating a valid request.'
        '401':
          description: 'Unauthorized, Developer’s key is not allowed to send a request'
        '403':
          description: >-
            Forbidden, Developer’s key has hit its daily/hourly limit or IP or
            domain not white-listed.
        '404':
          description: HTTP not found
        '412':
          description: 'Precondition Failed, i.e. Mandatory parameter is missing'
        '500':
          description: 'Internal Server Error, the request caused an error in our systems.'
        '503':
          description: >-
            Service Unavailable, during our maintenance break or server
            down-times.
      deprecated: false
    servers:
      - url: 'https://am.mapmyindia.in/'
        description: MapmyIndia UAT Server for Development & Evaluation
      - url: 'https://apis.mapmyindia.com'
        description: MapmyIndia Production Server
  '/advancedmaps/v1/{license_key}/distance_matrix_eta/{profile}/{coordinates}':
    get:
      tags:
        - DistanceMatrix
      summary: Distance Matrix API with ETA
      description: >-
        To get the updated duration considering live traffic; Applicable for
        India only “region=ind” and “rtype=1” is not supported. This is
        different from distance_matrix_traffic; since this doesn't search for a
        route considering traffic, it only applies delays to the default route.
      operationId: getDistanceMatrixWithETAUsingGET
      parameters:
        - $ref: '#/components/parameters/license_key'
        - name: profile
          in: path
          description: >-
            profile for routing engine.(Distance matrix ETA available only for
            driving)
          schema:
            type: string
            example: driving
          allowEmptyValue: false
          required: true
        - $ref: '#/components/parameters/coordinates'
        - $ref: '#/components/parameters/sources'
        - $ref: '#/components/parameters/destinations'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/distance_matrix'
        '400':
          description: 'Bad Request, User made an error while creating a valid request.'
        '401':
          description: 'Unauthorized, Developer’s key is not allowed to send a request'
        '403':
          description: >-
            Forbidden, Developer’s key has hit its daily/hourly limit or IP or
            domain not white-listed.
        '404':
          description: HTTP not found
        '412':
          description: 'Precondition Failed, i.e. Mandatory parameter is missing'
        '500':
          description: 'Internal Server Error, the request caused an error in our systems.'
        '503':
          description: >-
            Service Unavailable, during our maintenance break or server
            down-times.
      deprecated: false
    servers:
      - url: 'https://am.mapmyindia.in/'
        description: MapmyIndia UAT Server for Development & Evaluation
      - url: 'https://apis.mapmyindia.com'
        description: MapmyIndia Production Server
  '/advancedmaps/v1/{license_key}/distance_matrix_predictive/{profile}/{coordinates}':
    get:
      tags:
        - DistanceMatrix
      summary: Distance Matrix Predictive API with ETA
      description: >-
        Adding driving directions API would help to add predicted travel time &
        duration from a given origin point to a number of points. This REST API
        computes the distance and duration of a route between a source/primary
        position (geographical coordinates) and a list of all supplied secondary
        positions. Optionally one can input the dep_time parameter and get the
        distance and duration optimized for that part of day of a week. Time
        based functionality is available for selected cities only. Supported
        region is India. Please note that maximum number of points are limited
        to 100 only including source and destination positions. <li>         For
        any issues or questions please check DOC : <a
        href="https://www.mapmyindia.com/api/advanced-maps/doc/predictive-distance-matrix-api"
        target="_blank">Document Reference</a>
      operationId: getdistance_matrix_predictiveUsingGET
      parameters:
        - $ref: '#/components/parameters/license_key'
        - name: profile
          in: path
          description: >-
            profile for routing engine.(Distance matrix ETA available only for
            driving)
          schema:
            type: string
            example: driving
          allowEmptyValue: false
          required: true
        - $ref: '#/components/parameters/coordinates'
        - $ref: '#/components/parameters/sources'
        - $ref: '#/components/parameters/destinations'
        - name: dep_time
          in: query
          description: >-
            the UNIX timestamp of departure in seconds. Distance and ETA will be
            optimized as per given time.
          schema:
            type: integer
            format: int16
            default: 0
            example: 1531543500
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/distance_matrix_predictive'
        '400':
          description: 'Bad Request, User made an error while creating a valid request.'
        '401':
          description: 'Unauthorized, Developer’s key is not allowed to send a request'
        '403':
          description: >-
            Forbidden, Developer’s key has hit its daily/hourly limit or IP or
            domain not white-listed.
        '404':
          description: HTTP not found
        '412':
          description: 'Precondition Failed, i.e. Mandatory parameter is missing'
        '500':
          description: 'Internal Server Error, the request caused an error in our systems.'
        '503':
          description: >-
            Service Unavailable, during our maintenance break or server
            down-times.
      deprecated: false
    servers:
      - url: 'https://am.mapmyindia.in/'
        description: MapmyIndia UAT Server for Development & Evaluation
      - url: 'https://apis.mapmyindia.com'
        description: MapmyIndia Production Server
  '/advancedmaps/v1/{license_key}/snapToRoad/{coordinates}':
    get:
      tags:
        - SnapToRoad
      summary: Snap To Road API
      description: >-
        Snap To Road API, It is given GPS points to the road network in the most
        plausible way. Please note the request might result multiple sub-traces.
        Large jumps in the timestamps (> 60s) or improbable transitions lead to
        trace splits if a complete matching could not be found. The algorithm
        might not be able to match all points. Outliers are removed if they
        cannot be matched successfully and so gemotries polyline display's on
        road route  with nodes accuracy         For any issues or questions
        please check DOC : <a
        href="https://www.mapmyindia.com/api/advanced-maps/doc/snap-to-road-api"
        target="_blank">Document Reference</a>
      operationId: getSnapToRoadUsingGET
      parameters:
        - $ref: '#/components/parameters/license_key'
        - $ref: '#/components/parameters/coordinates'
        - $ref: '#/components/parameters/radiuses'
        - name: timestamps
          in: query
          description: >-
            Timestamps for the input locations in seconds since UNIX epoch.
            Timestamps need to be monotonically increasing. Values seems like
            {timestamp};{timestamp};{timestamp}
          schema:
            type: integer
            format: int16
            default: null
            example: 1542768909
        - name: geometries
          in: query
          description: >-
            This parameter used to change the route geometry format/density
            (influences overview and per step). Default value is (polyline) with
            5 digit precision; polyline6 for 6digit precision; geojson for
            geometries as geojson. Please note that “timestamps” parameter is
            mandatory for enabling geometries and so accuracy level of polyline
            draw is more accurate due to apply of nodes.
          schema:
            type: object
            default: null
          allowEmptyValue: false
          required: false
          example:
            - geometry:
                - 'ie`iByrp}MN{HKeMXmOKuGa@gIiAqFeCyHmBuDsBmB_CuAuGeBeP{D'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/snap2road'
        '400':
          description: 'Bad Request, User made an error while creating a valid request.'
        '401':
          description: 'Unauthorized, Developer’s key is not allowed to send a request'
        '403':
          description: >-
            Forbidden, Developer’s key has hit its daily/hourly limit or IP or
            domain not white-listed.
        '404':
          description: HTTP not found
        '412':
          description: 'Precondition Failed, i.e. Mandatory parameter is missing'
        '500':
          description: 'Internal Server Error, the request caused an error in our systems.'
        '503':
          description: >-
            Service Unavailable, during our maintenance break or server
            down-times.
      deprecated: false
    servers:
      - url: 'https://am.mapmyindia.in/'
        description: MapmyIndia UAT Server for Development & Evaluation
      - url: 'https://apis.mapmyindia.com'
        description: MapmyIndia Production Server
  '/advancedmaps/v1/{license_key}/mapMatching':
    get:
      tags:
        - MapMatching
      summary: Map Matching API
      description: >-
        In Map matching service snaps a waypoint to the street network and
        returns the nearest n matches where only a single point is supported.
      operationId: getmapMatchingUsingGET
      parameters:
        - $ref: '#/components/parameters/license_key'
        - $ref: '#/components/parameters/point'
        - $ref: '#/components/parameters/bearings'
        - $ref: '#/components/parameters/radiuses'
        - name: generate_hints
          in: query
          description: >-
            Adds a Hint to the response which can be used in subsequent
            requests, see hints parameter.
          schema:
            type: string
            default: true
          allowEmptyValue: false
          required: false
          example: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mapMatching'
        '400':
          description: 'Bad Request, User made an error while creating a valid request.'
        '401':
          description: 'Unauthorized, Developer’s key is not allowed to send a request'
        '403':
          description: >-
            Forbidden, Developer’s key has hit its daily/hourly limit or IP or
            domain not white-listed.
        '404':
          description: HTTP not found
        '412':
          description: 'Precondition Failed, i.e. Mandatory parameter is missing'
        '500':
          description: 'Internal Server Error, the request caused an error in our systems.'
        '503':
          description: >-
            Service Unavailable, during our maintenance break or server
            down-times.
      deprecated: false
    servers:
      - url: 'https://am.mapmyindia.in/'
        description: MapmyIndia UAT Server for Development & Evaluation
      - url: 'https://apis.mapmyindia.com'
        description: MapmyIndia Production Server
  '/advancedmaps/v1/{license_key}/route_adv/{profile}/{coordinates}':
    get:
      tags:
        - Routing
      summary: Route calculation without considering Traffic conditions.
      description: >-
        To calculate a route & its duration without considering traffic
        conditions and this API is avialable for all countries india (ind) and 
        "SNBBM" Sri-Lanka (lka), Nepal (npl), Bangladesh (bgd), Bhutan (btn) and
        Mayanmar (mmr). For any issues or questions please check doc : <a
        href="https://www.mapmyindia.com/api/advanced-maps/doc/routing-api"
        target="_blank">Document Reference</a>
      operationId: getRouteAdvanceUsingGET
      parameters:
        - $ref: '#/components/parameters/license_key'
        - $ref: '#/components/parameters/profile'
        - $ref: '#/components/parameters/coordinates'
        - $ref: '#/components/parameters/geometries'
        - $ref: '#/components/parameters/steps'
        - $ref: '#/components/parameters/exclude'
        - $ref: '#/components/parameters/rtype'
        - $ref: '#/components/parameters/region'
        - $ref: '#/components/parameters/bearings'
        - $ref: '#/components/parameters/alternatives'
        - $ref: '#/components/parameters/radiuses'
        - $ref: '#/components/parameters/overview'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/route'
        '400':
          description: 'Bad Request, User made an error while creating a valid request.'
        '401':
          description: 'Unauthorized, Developer’s key is not allowed to send a request'
        '403':
          description: >-
            Forbidden, Developer’s key has hit its daily/hourly limit or IP or
            domain not white-listed.
        '404':
          description: HTTP not found
        '412':
          description: 'Precondition Failed, i.e. Mandatory parameter is missing'
        '500':
          description: 'Internal Server Error, the request caused an error in our systems.'
        '503':
          description: >-
            Service Unavailable, during our maintenance break or server
            down-times.
      deprecated: false
    servers:
      - url: 'https://am.mapmyindia.in/'
        description: MapmyIndia UAT Server for Development & Evaluation
      - url: 'https://apis.mapmyindia.com'
        description: MapmyIndia Production Server
  '/advancedmaps/v1/{license_key}/route_eta/{profile}/{coordinates}':
    get:
      tags:
        - Routing
      summary: Route Advance API with ETA factor.
      description: >-
        To refresh the duration of existing route based on real time traffic
        conditions. This version is intended to support additional parameters
        for dynamic duration refresh. Customers using our traffic enabled
        direction APIs shall be able to refresh the ETA for pre-calculated route
        as competition/ partner is offering
      operationId: getRouteAdvanceETAUsingGET
      parameters:
        - $ref: '#/components/parameters/license_key'
        - name: profile
          in: path
          description: profile for routing engine.(Route ETA available only for driving)
          schema:
            type: string
          allowEmptyValue: false
          example: driving
          required: true
        - $ref: '#/components/parameters/coordinates'
        - $ref: '#/components/parameters/deviceId'
        - $ref: '#/components/parameters/geometries'
        - $ref: '#/components/parameters/steps'
        - $ref: '#/components/parameters/exclude'
        - $ref: '#/components/parameters/bearings'
        - $ref: '#/components/parameters/alternatives'
        - $ref: '#/components/parameters/radiuses'
        - $ref: '#/components/parameters/annotations'
        - $ref: '#/components/parameters/overview'
        - $ref: '#/components/parameters/routeRefresh'
        - $ref: '#/components/parameters/sessionId'
        - $ref: '#/components/parameters/isSort'
        - name: prevRouteId
          in: header
          description: >-
            unique route identifier, will be given if re-route calculation is
            requested for same destination.
          schema:
            type: string
            default: false
            example: 345678ggt23909765jg/2
          deprecated: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ETARoute'
        '400':
          description: 'Bad Request, User made an error while creating a valid request.'
        '401':
          description: 'Unauthorized, Developer’s key is not allowed to send a request'
        '403':
          description: >-
            Forbidden, Developer’s key has hit its daily/hourly limit or IP or
            domain not white-listed.
        '404':
          description: HTTP not found
        '412':
          description: 'Precondition Failed, i.e. Mandatory parameter is missing'
        '500':
          description: 'Internal Server Error, the request caused an error in our systems.'
        '503':
          description: >-
            Service Unavailable, during our maintenance break or server
            down-times.
      deprecated: false
    servers:
      - url: 'https://am.mapmyindia.in/'
        description: MapmyIndia UAT Server for Development & Evaluation
      - url: 'https://apis.mapmyindia.com'
        description: MapmyIndia Production Server
  '/advancedmaps/v1/{license_key}/route_traffic/{profile}/{coordinates}':
    get:
      tags:
        - Routing
      summary: Default Route Advance API without Traffic and ETA factor.
      description: >-
        To calculate a route & its duration with considering traffic conditions
        and route would flexible/update according to traffic weightage. For any
        issues or questions please check DOC : <a
        href="https://www.mapmyindia.com/api/advanced-maps/doc/routing-api"
        target="_blank">Document Reference</a>
      operationId: getRouteAdvanceTrafficUsingGET
      parameters:
        - $ref: '#/components/parameters/license_key'
        - name: profile
          in: path
          description: >-
            profile for routing engine.(Distance matrix ETA available only for
            driving)
          schema:
            type: string
          allowEmptyValue: false
          example: driving
          required: true
        - $ref: '#/components/parameters/coordinates'
        - $ref: '#/components/parameters/geometries'
        - $ref: '#/components/parameters/steps'
        - $ref: '#/components/parameters/exclude'
        - $ref: '#/components/parameters/bearings'
        - $ref: '#/components/parameters/annotations'
        - $ref: '#/components/parameters/alternatives'
        - $ref: '#/components/parameters/radiuses'
        - $ref: '#/components/parameters/overview'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/route'
        '400':
          description: 'Bad Request, User made an error while creating a valid request.'
        '401':
          description: 'Unauthorized, Developer’s key is not allowed to send a request'
        '403':
          description: >-
            Forbidden, Developer’s key has hit its daily/hourly limit or IP or
            domain not white-listed.
        '404':
          description: HTTP not found
        '412':
          description: 'Precondition Failed, i.e. Mandatory parameter is missing'
        '500':
          description: 'Internal Server Error, the request caused an error in our systems.'
        '503':
          description: >-
            Service Unavailable, during our maintenance break or server
            down-times.
      deprecated: false
    servers:
      - url: 'https://am.mapmyindia.in/'
        description: MapmyIndia UAT Server for Development & Evaluation
      - url: 'https://apis.mapmyindia.com'
        description: MapmyIndia Production Server
  '/advancedmaps/v1/{license_key}/route_eta_refresh/{profile}':
    get:
      tags:
        - Routing
      summary: Route Advance API with ETA Refresh factor.
      description: >-
        This API is used to refresh updated ETA on pre-calculated
        route.Integration of dynamic duration update considering real time
        traffic flow & events on a pre-calculated (traffic enabled) route for
        the benefit of consumer to get the better estimation to their
        destination.
      operationId: getRouteAdvanceETARefreshUsingGET
      parameters:
        - $ref: '#/components/parameters/license_key'
        - name: profile
          in: path
          description: profile for routing engine.(Route ETA available only for driving)
          schema:
            type: string
          allowEmptyValue: false
          example: driving
          required: true
        - $ref: '#/components/parameters/routeId'
        - name: routeIndex
          in: query
          description: >-
            selected index for navigation, range from 0-3. Apperently routeIndex
            is not mandatory for Sharetrip this is optional for sharetrip
            functionality
          required: true
          allowEmptyValue: false
          schema:
            type: integer
            default: 0
            enum:
              - -1
              - 0
              - 1
              - 3
          example: 2
        - name: tripType
          in: query
          description: 1 for trip start; 2 for trip end & 0 for active trip.
          schema:
            type: integer
            default: 0
            enum:
              - 0
              - 1
              - 2
          allowEmptyValue: false
          example: 1
          required: true
        - $ref: '#/components/parameters/sessionId'
        - name: isRefresh
          in: query
          description: true  (default) for refreshed eta & false for no response.
          schema:
            type: boolean
            default: true
            enum:
              - false
              - true
        - name: isNotify
          in: query
          description: >-
            TRUE, if notification for upcoming safety events is required;
            default will be FALSE.
          schema:
            type: boolean
            default: false
            enum:
              - false
              - true
        - name: nodeIndex
          in: query
          description: Index of approaching node mandatory if “isNotify” is TRUE
          schema:
            type: number
            default: 0
            example: 113
        - name: categories
          in: query
          description: Safety event categories required for safety events on route (WIP).
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ETARefresh'
        '201':
          description: trip did not start till now or already created
        '202':
          description: trip has been successfully completed
        '208':
          description: trip already completed or expired
        '400':
          description: 'Bad Request, User made an error while creating a valid request.'
        '401':
          description: 'Unauthorized, Developer’s key is not allowed to send a request'
        '403':
          description: >-
            Forbidden, Developer’s key has hit its daily/hourly limit or IP or
            domain not white-listed.
        '404':
          description: HTTP not found
        '412':
          description: 'Precondition Failed, i.e. Mandatory parameter is missing'
        '500':
          description: 'Internal Server Error, the request caused an error in our systems.'
        '503':
          description: >-
            Service Unavailable, during our maintenance break or server
            down-times.
      deprecated: false
    servers:
      - url: 'https://am.mapmyindia.in/'
        description: MapmyIndia UAT Server for Development & Evaluation
      - url: 'https://apis.mapmyindia.com/'
        description: MapmyIndia Production Server
components:
  parameters:
    license_key:
      name: license_key
      in: path
      description: REST API Key for your project.
      required: true
      allowEmptyValue: false
      schema:
        type: string
    profile:
      name: profile
      in: path
      description: profile for routing engine.
      required: true
      allowEmptyValue: false
      schema:
        type: string
        enum:
          - driving
          - walking
          - biking
          - trucking
    coordinates:
      name: coordinates
      in: path
      description: >-
        The first pair of longitude & latitude (comma separated)  is taken as
        the source and rest of the coordinate pairs as destination (s) whose
        distance & duration from source will be calculated
      required: true
      allowEmptyValue: false
      schema:
        type: string
        example: '77.8276812,28.9183792;78.9398237,27.9827493'
    point:
      name: point
      in: query
      description: >-
        The pair of longitude and latitude (comma separated) is taken as the
        single {longitude},{latitude} entry.
      required: true
      allowEmptyValue: false
      schema:
        type: string
        example: '77.8276812,28.9183792;78.9398237,27.9827493'
    rtype:
      name: rtype
      in: query
      description: >-
        rtype type of route (integer) required for navigation, where values mean
        </code></li>  <li> 0 optimal </code></li>  <li> 1 shortest (it will
        calculate route by excluding access penalties like private roads, etc.)
      schema:
        type: integer
        format: int16
        default: 0
        enum:
          - 0
          - 1
    sources:
      name: sources
      in: query
      description: Use location with given index(0;1 --etc) as source.
      allowEmptyValue: true
      required: false
      schema:
        type: number
        example: '{index};{index}[;{index} ...]'
        enum:
          - 0
          - 1
          - 0;1
          - 1;2
          - 0;3
          - all
    destinations:
      name: destinations
      in: query
      description: Use location with given index(0;1 --etc) as destination.
      allowEmptyValue: true
      required: false
      schema:
        type: number
        example: '{index};{index}[;{index} ...]'
        enum:
          - 0
          - 1
          - 0;1
          - 1;2
          - 0;3
          - all
    deviceId:
      name: deviceId
      in: query
      description: >-
        unique device identifier; datatypestring. apperently Implicitly
        mandatory for Navigation sharing and session management
      required: true
      allowEmptyValue: false
      schema:
        type: string
        default: 1234
    geometries:
      name: geometries
      in: query
      description: >-
        This parameter used to change the route geometry format/density
        (influences overview and per step).Default value is: <li> (polyline)
        with 5 digit precision; <li> polyline6 for 6digit precision; <li>
        geojson for geometries as geojson.
      schema:
        type: object
        default: polyline
        example:
          - geometry
          - - 'ie`iByrp}MN{HKeMXmOKuGa@gIiAqFeCyHmBuDsBmB_CuAuGeBeP{D'
    steps:
      name: steps
      in: query
      description: >-
        Return route steps for each route leg with intersections, classes,
        bearing, manuevre etc. Possible values are true/false.
      schema:
        type: string
        default: true
        enum:
          - true
          - false
    alternatives:
      name: alternatives
      in: query
      description: >-
        Search for alternative routes. Passing a number e.g. alternatives=3
        (max) searches for up to 3 (if available) alternative routes. Please
        note that even if alternative routes are requested, a result cannot be
        guaranteed.
      schema:
        type: string
        default: 'true'
        enum:
          - true
          - 0
          - 1
          - 2
          - 3
    isSort:
      name: isSort
      in: query
      description: To get route index duration in an ascending order.
      schema:
        type: boolean
        default: false
        enum:
          - false
          - true
    routeRefresh:
      name: routeRefresh
      in: query
      description: >-
        TRUE, if route is a candid for eta_refresh or safety      events, a
        unique identifier for route will be served as part of response
      schema:
        type: boolean
        default: false
        enum:
          - true
          - false
    sessionId:
      name: sessionId
      in: query
      description: >-
        Unique identifier for navigation session, will be given if re-route
        calculation is requested for same destination or choose alternative via
        route for same destination. Implicitly mandatory for Navigation sharing
        and session management
      required: false
      allowEmptyValue: false
      schema:
        type: string
        default: false
        example: 345678ggt23909765jg/2
    radiuses:
      name: radiuses
      in: query
      description: >-
        Limits the search to given radius in meters. For all way-points
        including start and end points and the value format is number >= 0 or
        unlimited (default).  {radius};{radius}[;{radius} ...]. (shall be part
        of premium offering).
      schema:
        type: number
        default: 0
        example: 10;10
    overview:
      name: overview
      in: query
      description: >-
        Add overview geometry either full, simplified according to highest zoom
        level it could be display on, or not at all. Possible values could be
        simplified (default), full, false. (shall be part of premium offering)
      schema:
        type: string
        default: full
        enum:
          - simplified
          - full
          - false
    exclude:
      name: exclude
      in: query
      description: >-
        Additive list of road classes to avoid, order does not matter. Possible
        values are toll, motorway & ferry and exclude 3 value together too.
      schema:
        type: string
        default: null
        enum:
          - toll
          - motorway
          - ferry
          - 'toll, motorway'
          - 'toll, motorway, ferry'
      allowEmptyValue: false
    bearings:
      name: bearings
      in: query
      description: >-
        Limits the search to segments with given bearing in degrees. The
        referencing will be to the true north and in clockwise direction. A
        combination of bearing and range e.g. {value},{range} integer 0 ..
        360,integer 0 .. 180. Please note The number of elements must match
        exactly the number of locations. You can also pass an empty value in
        case you dont want to add specific values. (shall be part of premium/
        navigation offering).
      schema:
        type: string
        default: '0'
    routeId:
      name: routeId
      in: query
      description: >-
        RouteId represents one leg object of route. Although routeId is optional
        for sharetrip functionality
      schema:
        type: string
      required: true
      allowEmptyValue: false
      example: 65626hy2992hih09782/2
    annotations:
      name: annotations
      in: query
      description: >-
        Returns additional metadata for each coordinate along the    route
        geometry (shall be part of internal use case only).       Applicable for
        traffic enabled APIs, possible values are <li> **nodes** - node ID for
        each coordinate along the route, excluding the first/last user-supplied
        coordinates  <li> **distance** - distance (in metres), duration in
        traffic (du_act) and for optimal (du_opt)  between each pair of
        coordinates  <li> **duration** - duration between each pair of
        coordinates, in seconds. Does not include the duration of any turns. 
        <li> **speed** -  Convenience field, calculation of distance / duration
        rounded to one decimal place <li> **baseDuration** - To get optimal
        (Without Traffic) duration of route. <li> **congestion** - congestion
        between each pair of coordinates. for eg. unknown, heavy, moderate, low
        & severe.
      schema:
        type: string
        default: null
        enum:
          - nodes
          - distance
          - duration
          - speed
          - congestion
          - baseDuration
          - true
    region:
      name: region
      in: query
      description: >-
        This parameter is optional for India; for other countries (Sri Lanka,
        Nepal, Bangladesh & Bhutan) this parameter is mandatory. Possible values
        are ind (for India, default), lka (for Sri Lanka) , npl (for Nepal) ,
        bgd (for Bangladesh), mmr (for Myanmar) and btn (for Bhutan).
      schema:
        type: string
        example: lka - Srilanka
        default: ind
        enum:
          - ind
          - lka
          - npl
          - bgd
          - btn
          - mmr
  schemas:
    distance_matrix:
      title: distance_matrix
      type: object
      properties:
        responseCode:
          type: integer
          description: See the service dependent and general status codes
          format: int16
          example: 200
        version:
          type: string
          description: API’s version information.
          example: 220.17.522
        result:
          type: string
          description: >-
            If request is passed correctly then response reflect it as in OK.
            Name of theEvery response object has a code property containing one
            of the strings below or a service dependent:</code></li>  <li> Ok:
            </code> Request could be processed as expected. </code></li>  <li>
            InvalidUrl: </code> URL string is invalid. </code></li>  <li>
            InvalidService: </code> Service name is invalid.. </code></li>  <li>
            InvalidVersion: </code> Version is not found. </code></li>  <li>
            InvalidOptions: </code> Options are invalid. </code></li>  <li>
            InvalidQuery: </code> The query string is synctactically malformed.
            </code></li>  <li> InvalidValue: </code> The successfully parsed
            query parameters are invalid. </code></li>  <li> NoSegment: </code>
            One of the supplied input coordinates could not snap to street
            segment. </code></li>  <li> TooBig: </code> The request size
            violates one of the service specific request size restrictions.
          example:
            code: OK
        distances:
          type: number
          description: >-
            Duration in seconds for source to source (default 0), 1st, 2nd, 3rd
            secondary locations from source
          example:
            - - 0
              - 6817.7
              - 20475.7
              - null
        durations:
          type: number
          description: >-
            c.distance in meters for source to source (default 0), 1st, 2nd, 3rd
            secondary locations from source
          example:
            - - 0
              - 1844.4
              - 5307.5
              - null
    distance_matrix_predictive:
      title: distance_matrix_predictive
      type: object
      properties:
        responseCode:
          type: integer
          description: See the service dependent and general status codes
          format: int16
          example: 200
        check:
          type: integer
          description: Internal response (for MMI internal purposes only)
          example: 5025
        version:
          type: string
          description: API’s version information.
          example: 220.17.522
        distances:
          type: number
          description: >-
            Duration in seconds for source to source (default 0), 1st, 2nd, 3rd
            secondary locations from source
          example:
            - - 0
              - 6817.7
              - null
        durations:
          type: number
          description: >-
            Distance in meters for source to source (default 0), 1st, 2nd, 3rd
            secondary locations from source
          example:
            - - 0
              - 1844.4
              - null
    results:
      description: Array of results object representing nearset waypoint(s)
      type: object
      properties:
        waypoints:
          type: object
          $ref: '#/components/schemas/mmwaypoints'
    mapMatching:
      title: mapMatching
      type: object
      properties:
        responseCode:
          type: integer
          description: See the service dependent and general status codes
          format: number
          example: 200
        version:
          type: string
          description: API Versioning detail.
          example: 220.17.522
        results:
          $ref: '#/components/schemas/results'
        code:
          type: string
          description: >-
            Name of theEvery response object has a code property containing one
            of the strings below or a service dependent:</code></li>  <li> Ok:
            </code> Request could be processed as expected. </code></li>  <li>
            InvalidUrl: </code> URL string is invalid. </code></li>  <li>
            InvalidService: </code> Service name is invalid.. </code></li>  <li>
            InvalidVersion: </code> Version is not found. </code></li>  <li>
            InvalidOptions: </code> Options are invalid. </code></li>  <li>
            InvalidQuery: </code> The query string is synctactically malformed.
            </code></li>  <li> InvalidValue: </code> The successfully parsed
            query parameters are invalid. </code></li>  <li> NoSegment: </code>
            One of the supplied input coordinates could not snap to street
            segment. </code></li>  <li> TooBig: </code> The request size
            violates one of the service specific request size restrictions.
          example: Ok
    snap2road:
      title: snap2road
      type: object
      properties:
        responseCode:
          type: integer
          description: See the service dependent and general status codes
          format: number
          example: 200
        version:
          type: string
          description: API’s version information.
          example: 220.17.522
        result:
          $ref: '#/components/schemas/result_s2r'
        code:
          type: string
          description: >-
            Name of theEvery response object has a code property containing one
            of the strings below or a service dependent:</code></li>  <li> Ok:
            </code> Request could be processed as expected. </code></li>  <li>
            InvalidUrl: </code> URL string is invalid. </code></li>  <li>
            InvalidService: </code> Service name is invalid.. </code></li>  <li>
            InvalidVersion: </code> Version is not found. </code></li>  <li>
            InvalidOptions: </code> Options are invalid. </code></li>  <li>
            InvalidQuery: </code> The query string is synctactically malformed.
            </code></li>  <li> InvalidValue: </code> The successfully parsed
            query parameters are invalid. </code></li>  <li> NoSegment: </code>
            One of the supplied input coordinates could not snap to street
            segment. </code></li>  <li> TooBig: </code> The request size
            violates one of the service specific request size restrictions.
          example: Ok
    result_s2r:
      title: result_s2r
      type: object
      properties:
        snappedPoints:
          type: string
          description: 'if the request was successful, code is ok.'
          example:
            - waypoint_index: 0
            - location:
                - 78.405729
                - 17.373168
            - - waypoint_index: 1
              - location:
                  - 78.40958
                  - 17.373151
              - null
              - null
            - waypoint_index: 2
            - location:
                - 78.420424
                - 17.377454
            - waypoint_index: 3
            - location:
                - 78.421362
                - 17.380197
            - matchings:
                - geometry: 'ie`iByrp}MN{HKeMXmOKuGa@gIiAqFeCyHmBuDsBmB_CuAuGeBeP{D'
    mmwaypoints:
      title: mmwaypoints
      description: Array of Waypoint objects representing all waypoints in order
      type: object
      properties:
        nodes:
          type: object
          format: number
          description: Array of Nodes for matched segment
          example:
            - 99597384
            - 1013086293
        hint:
          type: string
          description: >-
            Unique internal identifier of the segment (ephemeral, not constant
            over data updates) This can be used on subsequent request to
            significantly speed up the query and to connect multiple services.
            E.g. you can use the hint value obtained by the nearest query as
            hint values for route inputs
          example: >-
            jswggP___38pAAAAQAAAAAAAAAAAAAAACi-sQankP0EAAAAAAAAAACkAAABAAAAAAAAAAAAAAADBAAAAif6aBCX2swGc_poELfazAQAAvwm4LMFh
        distance:
          type: number
          description: Distance in meters to the supplied input coordinate.
          example: 15.014575
        location:
          type: object
          description: >-
            longitude, latitude pair describing the snapped location of the
            waypoint
          example:
            - 77.308945
            - 28.575405
        name:
          type: string
          description: Name of the street the coordinate snapped to.
          example: CV Raman Marg
    waypoints:
      title: waypoints
      description: Array of Waypoint objects representing all waypoints in order
      type: object
      properties:
        hint:
          type: number
          description: >-
            Unique internal identifier of the segment (ephemeral, not constant
            over data updates) This can be used on subsequent request to
            significantly speed up the query and to connect multiple services.
            E.g. you can use the hint value obtained by the nearest query as
            hint values for route inputs
          example: >-
            jswggP___38pAAAAQAAAAAAAAAAAAAAACi-sQankP0EAAAAAAAAAACkAAABAAAAAAAAAAAAAAADBAAAAif6aBCX2swGc_poELfazAQAAvwm4LMFh
        distance:
          type: number
          description: Distance in meters to the supplied input coordinate.
          example: 15.014575
        location:
          type: object
          description: >-
            longitude, latitude pair describing the snapped location of the
            waypoint
          example:
            - 77.308945
            - 28.575405
        name:
          type: string
          description: Name of the street the coordinate snapped to.
          example: CV Raman Marg
    intersections:
      title: intersections
      type: object
      description: >-
        A list of Intersection objects1 that are passed along the segment, the
        very first belonging to the StepManeuver
      properties:
        classes:
          type: string
          description: Categorised types of road segments.
          example: Motorway
        in:
          type: integer
          description: >-
            Index into bearings/entry array. Used to calculate the bearing just
            before the turn. Namely, the clockwise angle from true north to the
            direction of travel immediately before the maneuver/passing the
            intersection. Bearings are given relative to the intersection. To
            get the bearing in the direction of driving, the bearing has to be
            rotated by a value of 180. The value is not supplied for depart
            maneuvers
          example: 1
        out:
          type: integer
          description: >-
            Index into the bearings/entry array. Used to extract the bearing
            just after the turn. Namely, The clockwise angle from true north to
            the direction of travel immediately after the maneuver/passing the
            intersection. The value is not supplied for arrive maneuvers
          example: 2
        entry:
          type: boolean
          description: >-
            A list of entry flags, corresponding in a 1:1 relationship to the
            bearings. A value of true indicates that the respective road could
            be entered on a valid route. false indicates that the turn onto the
            respective road would violate a restriction
          example:
            - true
            - false
            - true
            - true
        lane:
          type: array
          items:
            $ref: '#/components/schemas/lane'
            description: >-
              Array of Lane objects that denote the available turn lanes at the
              intersection. If lane information is no available for an
              intersection, the lanes property will not be present
        location:
          type: number
          description: 'A [longitude, latitude] pair describing the location of the turn.'
          example:
            - 77.30882
            - 28.57386
        bearing:
          type: string
          description: >-
            A list of bearing values (e.g. [0,90,180,270]) that are available at
            the intersection. The bearings describe all available roads at the
            intersection
          example:
            - 90
            - 150
            - 330
    lane:
      title: lane
      type: object
      description: >-
        Array of Lane objects that denote the available turn lanes at the
        intersection. If no lane information is available for an intersection,
        the lanes property will not be present
      properties:
        valid:
          type: boolean
          description: verifying lane info
          example: true
        intersections:
          type: string
          description: >-
            Indicating a sign of directions like Straight, Slight Left, Right,
            etc. To see the complete list of indications
          example:
            - straight
            - slight left
    steps:
      title: steps
      type: object
      description: Return route steps for each route leg depending upon steps parameter
      properties:
        intersections:
          type: array
          items: null
          $ref: '#/components/schemas/intersections'
          description: >-
            A list of Intersection objects1 that are passed along the segment,
            the very first belonging to the StepManeuver
        driving_side:
          type: string
          description: 'Left. (default) for India, Sri Lanka, Nepal, Bangladesh & Bhutan'
          example: left
        geometry:
          type: object
          description: >-
            The un-simplified geometry of the route segment, depends on the
            given geometries parameter.
          example: '}glmDqhzvM|@pBf@`A'
        duration:
          type: number
          description: 'The estimated travel time, in float number of seconds'
          example: 64.5
        distance:
          type: number
          description: Distance in meters to the supplied input coordinate.
          example: 103.8
        name:
          type: string
          description: Name of the street the coordinate snapped to.
          example: Motilal Marg
        weight:
          type: number
          description: Parameter for internal use only
          example: 64.5
        mode:
          type: string
          default: driving
          description: Signifies the mode of transportation.
          example: driving
        maneuver:
          type: array
          items:
            $ref: '#/components/schemas/maneuver'
    maneuver:
      title: maneuver
      type: object
      description: A StepManeuver object representing a maneuver
      properties:
        bearing_after:
          type: number
          description: >-
            The clockwise angle from true north to the direction of travel
            immediately after the maneuver.
          example: 0
        bearing_before:
          type: number
          description: >-
            The clockwise angle from true north to the direction of travel
            immediately before the maneuver.
          example: 155
        location:
          type: number
          description: 'A [longitude, latitude] pair describing the location of the turn.'
          example:
            - 77.26657
            - 28.571173
        type:
          type: string
          description: >-
            A string indicating the type of maneuver. New identifiers might be
            introduced without API change. Types unknown to the client should be
            handled like the .turn. type, the existence of correct modifier
            values is guaranteed
          example: fork
        modifier:
          type: string
          description: >-
            An optional string indicating the direction change of the maneuver.
            To see the complete list of modifiers
          example: left
    ETARefresh:
      title: ETARefresh
      type: object
      description: >-
        The legs between the given waypoints, representing an array of routes
        between two waypoints
      properties:
        duration:
          type: number
          description: 'The estimated travel time, in float number of seconds'
          example: 657.3
        distance:
          type: number
          description: 'The distance of travel to the subsequent step, in float meters'
          example: 7112
        legs:
          type: integer
          description: >-
            The legs between the given waypoints, representing an array of
            routes between two waypoints
          example: 0
        steps:
          type: array
          description: Return route steps for each route leg depending upon steps parameter
          items: null
          $ref: '#/components/schemas/steps'
        weight_name:
          type: string
          description: Parameter for internal purpose only
          example: routability
        weight:
          type: number
          description: Parameter for internal use only
          example: 657.3
        geometry:
          type: object
          description: >-
            returns the whole geometry of the route as per given parameter
            .geometries. default is encoded .polyline. with 5 digit accuracy for
            positional coordinates. for eg. geometries = polyline
          example: >-
            iclmD{kzvMk@^gBhA|@pBf@`AvCwBjEoCrDmC`Ai@\\S\\UdBqARc@H]F[?[AYAOIOIKOMQKSEUAS?SFULONO\\Gd@
    legs:
      title: legs
      type: object
      description: >-
        The legs between the given waypoints, representing an array of routes
        between two waypoints
      properties:
        legs:
          type: integer
          description: >-
            The legs between the given waypoints, representing an array of
            routes between two waypoints
          example: 0
        steps:
          type: array
          description: Return route steps for each route leg depending upon steps parameter
          items: null
          $ref: '#/components/schemas/steps'
        weight:
          type: number
          description: Parameter for internal use only
          example: 657.3
        distance:
          type: number
          description: 'The distance of travel to the subsequent step, in float meters'
          example: 7112
        summary:
          type: string
          description: Summary of the route taken as string. Depends on the steps parameter
        duration:
          type: number
          description: 'The estimated travel time, in float number of seconds'
          example: 657.3
    routes:
      title: routes
      type: object
      description: 'An array of route objects, each having potentially multiple via points'
      properties:
        leg:
          type: array
          items: null
          $ref: '#/components/schemas/legs'
        weight_name:
          type: string
          description: Parameter for internal purpose only
          example: routability
        geometry:
          type: object
          description: >-
            returns the whole geometry of the route as per given parameter
            .geometries. default is encoded .polyline. with 5 digit accuracy for
            positional coordinates. for eg. geometries = polyline
          example: >-
            iclmD{kzvMk@^gBhA|@pBf@`AvCwBjEoCrDmC`Ai@\\S\\UdBqARc@H]F[?[AYAOIOIKOMQKSEUAS?SFULONO\\Gd@?r@NnBNz@F^Fd@LvAB`@@t@@r@Cr@M`BK`AGZkBdFm@bAoAvAaEtDgG`EiBjAuDvB_DbBoAhAoA~AOVg@jAeAdCSp@o@`CQfA?FSdBIbAEfB?tABv@P~BDf@D\\Jl@Nr@\\nAb@zA~B`HdAnDpF|PvAlEtAjEt@|Bh@zBZjBR`BRtCDjACzCIdBQ`BUzAQx@_@~Aa@tASj@q@|ASb@kAnBSZm@v@qAzA_AfAaDtDkB`CwBfC]b@k@bA_@r@Ud@IX_@rAS~@QdACVCf@Cd@?`@B|@D~@Dh@@VF`@Jl@Nn@Jd@Xr@v@bBR\\JRP\\l@v@v@`AdGdHxCrDhA~AlCrEpA|BhArBf@JF?HAFCz@u@|@s@hEaE|@s@l@a@f@[`Ac@jC}@~@]n@Wj@Yb@Q
        weight:
          type: number
          description: Parameter for internal use only
          example: 657.3
        distance:
          type: number
          description: 'The distance of travel to the subsequent step, in float meters'
          example: 7112
        duration:
          type: number
          description: 'The estimated travel time, in float number of seconds'
          example: 657.3
    ETARoute:
      title: ETARoute
      type: object
      properties:
        route:
          type: array
          items:
            $ref: '#/components/schemas/routes'
        code:
          type: string
          description: >-
            Name of theEvery response object has a code property containing one
            of the strings below or a service dependent:</code></li>  <li> Ok:
            </code> Request could be processed as expected. </code></li>  <li>
            InvalidUrl: </code> URL string is invalid. </code></li>  <li>
            InvalidService: </code> Service name is invalid.. </code></li>  <li>
            InvalidVersion: </code> Version is not found. </code></li>  <li>
            InvalidOptions: </code> Options are invalid. </code></li>  <li>
            InvalidQuery: </code> The query string is synctactically malformed.
            </code></li>  <li> InvalidValue: </code> The successfully parsed
            query parameters are invalid. </code></li>  <li> NoSegment: </code>
            One of the supplied input coordinates could not snap to street
            segment. </code></li>  <li> TooBig: </code> The request size
            violates one of the service specific request size restrictions.
          example: Ok
        routeId:
          type: string
          description: unique route identifier
          example: b0ee6af4-c7df-11e9-bf9f-0176307f9860_123
        sessionId:
          type: string
          description: >-
            unique session identifier; will be added to response if deviceId is
            given
          example: b0ee6af4-c7df-11e9-bf9f-0176307f9860_123
        waypoints:
          type: array
          items:
            $ref: '#/components/schemas/waypoints'
    route:
      title: route
      type: object
      properties:
        code:
          type: string
          description: >-
            Name of theEvery response object has a code property containing one
            of the strings below or a service dependent:</code></li>  <li> Ok:
            </code> Request could be processed as expected. </code></li>  <li>
            InvalidUrl: </code> URL string is invalid. </code></li>  <li>
            InvalidService: </code> Service name is invalid.. </code></li>  <li>
            InvalidVersion: </code> Version is not found. </code></li>  <li>
            InvalidOptions: </code> Options are invalid. </code></li>  <li>
            InvalidQuery: </code> The query string is synctactically malformed.
            </code></li>  <li> InvalidValue: </code> The successfully parsed
            query parameters are invalid. </code></li>  <li> NoSegment: </code>
            One of the supplied input coordinates could not snap to street
            segment. </code></li>  <li> TooBig: </code> The request size
            violates one of the service specific request size restrictions.
          example: Ok
        waypoints:
          type: array
          items: null
          $ref: '#/components/schemas/waypoints'
        routes:
          type: array
          items: null
          $ref: '#/components/schemas/routes'
  securitySchemes:
    mmi_auth:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: 'https://outpost.mapmyindia.com/api/security/oauth/token'
          scopes:
            READ: read authorization for APIs
